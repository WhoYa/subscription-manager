package bot

import (
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/WhoYa/subscription-manager/internal/bot/api"
	"github.com/WhoYa/subscription-manager/internal/bot/keyboards"
	"github.com/WhoYa/subscription-manager/internal/bot/types"
)

// handleEditSubscription –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func (b *Bot) handleEditSubscription(chatID int64, messageID int) {
	subscriptions, err := b.Context.APIClient.GetSubscriptions(25, 0)
	if err != nil {
		b.sendErrorMessage(chatID, messageID, err, "manage_subscriptions")
		return
	}

	if len(subscriptions) == 0 {
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(ButtonCreateSubscription, "create_subscription"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(ButtonBack, "manage_subscriptions"),
			),
		)

		b.editMessage(chatID, messageID, MessageEditSubscriptionEmpty, &keyboard)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
	var rows [][]tgbotapi.InlineKeyboardButton

	for _, sub := range subscriptions {
		status := getSubscriptionStatus(sub.IsActive)
		buttonText := fmt.Sprintf("%s %s (%.2f %s)", status, sub.ServiceName, sub.BasePrice, sub.BaseCurrency)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, fmt.Sprintf("edit_sub_%s", sub.ID)),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(ButtonBack, "manage_subscriptions"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.editMessage(chatID, messageID, MessageEditSubscriptionTitle, &keyboard)
}

// handleEditUser –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func (b *Bot) handleEditUser(chatID int64, messageID int) {
	users, err := b.Context.APIClient.GetUsers(25, 0)
	if err != nil {
		b.sendErrorMessage(chatID, messageID, err, "manage_users")
		return
	}

	if len(users) == 0 {
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(ButtonCreateUser, "create_user"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(ButtonBack, "manage_users"),
			),
		)

		b.editMessage(chatID, messageID, MessageEditUserEmpty, &keyboard)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
	var rows [][]tgbotapi.InlineKeyboardButton

	for _, user := range users {
		adminStatus := ""
		if user.IsAdmin {
			adminStatus = " üëë"
		}

		buttonText := fmt.Sprintf("%s%s", user.Fullname, adminStatus)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, fmt.Sprintf("edit_user_%s", user.ID)),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(ButtonBack, "manage_users"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.editMessage(chatID, messageID, MessageEditUserTitle, &keyboard)
}

// showSubscriptionEditMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) showSubscriptionEditMenu(chatID int64, messageID int, subscriptionID string) {
	subscription, err := b.Context.APIClient.GetSubscription(subscriptionID)
	if err != nil {
		b.sendErrorMessage(chatID, messageID, err, "edit_subscription")
		return
	}

	status := getSubscriptionStatus(subscription.IsActive)

	text := fmt.Sprintf(MessageEditSubscriptionMenu, subscription.ServiceName, subscription.BasePrice, subscription.BaseCurrency, subscription.PeriodDays, status)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(ButtonEditName, fmt.Sprintf("edit_sub_name_%s", subscriptionID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(ButtonEditPrice, fmt.Sprintf("edit_sub_price_%s", subscriptionID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(ButtonEditCurrency, fmt.Sprintf("edit_sub_currency_%s", subscriptionID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(ButtonEditPeriod, fmt.Sprintf("edit_sub_period_%s", subscriptionID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(ButtonToggleStatus, fmt.Sprintf("toggle_sub_status_%s", subscriptionID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(ButtonBack, "edit_subscription"),
		),
	)

	b.editMessage(chatID, messageID, text, &keyboard)
}

// showUserEditMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) showUserEditMenu(chatID int64, messageID int, userID string) {
	user, err := b.Context.APIClient.GetUser(userID)
	if err != nil {
		b.sendErrorMessage(chatID, messageID, err, "edit_user")
		return
	}

	adminStatus := getUserRoleStatus(user.IsAdmin)
	usernameText := formatUsername(user.Username)

	text := fmt.Sprintf(MessageEditUserMenu, user.Fullname, user.TGID, usernameText, adminStatus)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(ButtonEditFullname, fmt.Sprintf("edit_user_fullname_%s", userID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(ButtonEditUsername, fmt.Sprintf("edit_user_username_%s", userID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(ButtonToggleRole, fmt.Sprintf("toggle_user_admin_%s", userID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(ButtonBack, "edit_user"),
		),
	)

	b.editMessage(chatID, messageID, text, &keyboard)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
func (b *Bot) handleEditSubscriptionNameInput(message *tgbotapi.Message) {
	userState := b.getUserState(message.From.ID)
	if userState.EditData == nil {
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	newName := strings.TrimSpace(message.Text)
	if newName == "" {
		b.sendMessage(message.Chat.ID, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	req := api.UpdateSubscriptionRequest{
		ServiceName: &newName,
	}

	subscription, err := b.Context.APIClient.UpdateSubscription(userState.EditData.EntityID, req)
	if err != nil {
		b.sendMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err))
		return
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	userState.State = types.StateIdle
	userState.EditData = nil

	text := fmt.Sprintf("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: %s", subscription.ServiceName)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboards.BackKeyboard(fmt.Sprintf("edit_sub_%s", subscription.ID))
	b.API.Send(msg)
}

func (b *Bot) handleEditSubscriptionPriceInput(message *tgbotapi.Message) {
	userState := b.getUserState(message.From.ID)
	if userState.EditData == nil {
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	priceStr := strings.TrimSpace(message.Text)
	price, err := strconv.ParseFloat(priceStr, 64)
	if err != nil || price <= 0 {
		b.sendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	req := api.UpdateSubscriptionRequest{
		BasePrice: &price,
	}

	subscription, err := b.Context.APIClient.UpdateSubscription(userState.EditData.EntityID, req)
	if err != nil {
		b.sendMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err))
		return
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	userState.State = types.StateIdle
	userState.EditData = nil

	text := fmt.Sprintf("‚úÖ –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: %.2f %s", subscription.BasePrice, subscription.BaseCurrency)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboards.BackKeyboard(fmt.Sprintf("edit_sub_%s", subscription.ID))
	b.API.Send(msg)
}

func (b *Bot) handleEditSubscriptionPeriodInput(message *tgbotapi.Message) {
	userState := b.getUserState(message.From.ID)
	if userState.EditData == nil {
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	periodStr := strings.TrimSpace(message.Text)
	period, err := strconv.Atoi(periodStr)
	if err != nil || period <= 0 {
		b.sendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	req := api.UpdateSubscriptionRequest{
		PeriodDays: &period,
	}

	subscription, err := b.Context.APIClient.UpdateSubscription(userState.EditData.EntityID, req)
	if err != nil {
		b.sendMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err))
		return
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	userState.State = types.StateIdle
	userState.EditData = nil

	text := fmt.Sprintf("‚úÖ –ü–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: %d –¥–Ω–µ–π", subscription.PeriodDays)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboards.BackKeyboard(fmt.Sprintf("edit_sub_%s", subscription.ID))
	b.API.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *Bot) handleEditUserFullnameInput(message *tgbotapi.Message) {
	userState := b.getUserState(message.From.ID)
	if userState.EditData == nil {
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	newFullname := strings.TrimSpace(message.Text)
	if newFullname == "" {
		b.sendMessage(message.Chat.ID, "‚ùå –§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	req := api.UpdateUserRequest{
		Fullname: &newFullname,
	}

	user, err := b.Context.APIClient.UpdateUser(userState.EditData.EntityID, req)
	if err != nil {
		b.sendMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err))
		return
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	userState.State = types.StateIdle
	userState.EditData = nil

	text := fmt.Sprintf("‚úÖ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: %s", user.Fullname)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboards.BackKeyboard(fmt.Sprintf("edit_user_%s", user.ID))
	b.API.Send(msg)
}

func (b *Bot) handleEditUserUsernameInput(message *tgbotapi.Message) {
	userState := b.getUserState(message.From.ID)
	if userState.EditData == nil {
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	newUsername := strings.TrimSpace(message.Text)
	// Username –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	req := api.UpdateUserRequest{
		Username: &newUsername,
	}

	user, err := b.Context.APIClient.UpdateUser(userState.EditData.EntityID, req)
	if err != nil {
		b.sendMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err))
		return
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	userState.State = types.StateIdle
	userState.EditData = nil

	usernameText := "–Ω–µ —É–∫–∞–∑–∞–Ω"
	if user.Username != "" {
		usernameText = "@" + user.Username
	}

	text := fmt.Sprintf("‚úÖ Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω: %s", usernameText)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboards.BackKeyboard(fmt.Sprintf("edit_user_%s", user.ID))
	b.API.Send(msg)
}

// handleEditSubscriptionCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
func (b *Bot) handleEditSubscriptionCallback(query *tgbotapi.CallbackQuery) {
	parts := strings.Split(query.Data, "_")
	if len(parts) < 3 {
		b.sendMessage(query.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.")
		return
	}

	action := parts[2]
	subscriptionID := parts[len(parts)-1]

	switch action {
	case "name":
		b.startEditSubscriptionName(query.From.ID, query.Message.Chat.ID, subscriptionID)
	case "price":
		b.startEditSubscriptionPrice(query.From.ID, query.Message.Chat.ID, subscriptionID)
	case "currency":
		b.startEditSubscriptionCurrency(query.From.ID, query.Message.Chat.ID, subscriptionID)
	case "period":
		b.startEditSubscriptionPeriod(query.From.ID, query.Message.Chat.ID, subscriptionID)
	default:
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
		b.showSubscriptionEditMenu(query.Message.Chat.ID, query.Message.MessageID, subscriptionID)
	}
}

// handleEditUserCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *Bot) handleEditUserCallback(query *tgbotapi.CallbackQuery) {
	parts := strings.Split(query.Data, "_")
	if len(parts) < 3 {
		b.sendMessage(query.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.")
		return
	}

	action := parts[2]
	userID := parts[len(parts)-1]

	switch action {
	case "fullname":
		b.startEditUserFullname(query.From.ID, query.Message.Chat.ID, userID)
	case "username":
		b.startEditUserUsername(query.From.ID, query.Message.Chat.ID, userID)
	default:
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		b.showUserEditMenu(query.Message.Chat.ID, query.Message.MessageID, userID)
	}
}

// handleToggleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
func (b *Bot) handleToggleCallback(query *tgbotapi.CallbackQuery) {
	parts := strings.Split(query.Data, "_")
	if len(parts) < 4 {
		b.sendMessage(query.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.")
		return
	}

	entityType := parts[1]
	action := parts[2]
	entityID := parts[len(parts)-1]

	switch entityType {
	case "sub":
		if action == "status" {
			b.toggleSubscriptionStatus(query.Message.Chat.ID, entityID)
		}
	case "user":
		if action == "admin" {
			b.toggleUserAdminStatus(query.Message.Chat.ID, entityID)
		}
	default:
		b.sendMessage(query.Message.Chat.ID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏.")
	}
}

// –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
func (b *Bot) startEditSubscriptionName(userID, chatID int64, subscriptionID string) {
	userState := b.getUserState(userID)
	userState.State = types.StateEditingSubscriptionName
	userState.EditData = &types.EditData{
		EntityType: "subscription",
		EntityID:   subscriptionID,
	}

	b.sendSimpleMessage(chatID, MessageEditSubscriptionNamePrompt)
}

func (b *Bot) startEditSubscriptionPrice(userID, chatID int64, subscriptionID string) {
	userState := b.getUserState(userID)
	userState.State = types.StateEditingSubscriptionPrice
	userState.EditData = &types.EditData{
		EntityType: "subscription",
		EntityID:   subscriptionID,
	}

	b.sendSimpleMessage(chatID, MessageEditSubscriptionPricePrompt)
}

func (b *Bot) startEditSubscriptionCurrency(userID, chatID int64, subscriptionID string) {
	userState := b.getUserState(userID)
	userState.State = types.StateEditingSubscriptionCurrency
	userState.EditData = &types.EditData{
		EntityType: "subscription",
		EntityID:   subscriptionID,
	}

	text := "üí± –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É:"
	keyboard := keyboards.CurrencyKeyboard()
	b.sendMessageWithKeyboard(chatID, text, &keyboard)
}

func (b *Bot) startEditSubscriptionPeriod(userID, chatID int64, subscriptionID string) {
	userState := b.getUserState(userID)
	userState.State = types.StateEditingSubscriptionPeriod
	userState.EditData = &types.EditData{
		EntityType: "subscription",
		EntityID:   subscriptionID,
	}

	b.sendSimpleMessage(chatID, MessageEditSubscriptionPeriodPrompt)
}

// –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *Bot) startEditUserFullname(userID, chatID int64, targetUserID string) {
	userState := b.getUserState(userID)
	userState.State = types.StateEditingUserFullname
	userState.EditData = &types.EditData{
		EntityType: "user",
		EntityID:   targetUserID,
	}

	b.sendSimpleMessage(chatID, MessageEditUserFullnamePrompt)
}

func (b *Bot) startEditUserUsername(userID, chatID int64, targetUserID string) {
	userState := b.getUserState(userID)
	userState.State = types.StateEditingUserUsername
	userState.EditData = &types.EditData{
		EntityType: "user",
		EntityID:   targetUserID,
	}

	b.sendSimpleMessage(chatID, MessageEditUserUsernamePrompt)
}

// –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
func (b *Bot) toggleSubscriptionStatus(chatID int64, subscriptionID string) {
	subscription, err := b.Context.APIClient.GetSubscription(subscriptionID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err))
		return
	}

	newStatus := !subscription.IsActive
	req := api.UpdateSubscriptionRequest{
		IsActive: &newStatus,
	}

	updatedSubscription, err := b.Context.APIClient.UpdateSubscription(subscriptionID, req)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: %v", err))
		return
	}

	statusText := "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
	if !updatedSubscription.IsActive {
		statusText = "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
	}

	text := fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ %s %s", updatedSubscription.ServiceName, statusText)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboards.BackKeyboard(fmt.Sprintf("edit_sub_%s", subscriptionID))
	b.API.Send(msg)
}

func (b *Bot) toggleUserAdminStatus(chatID int64, userID string) {
	user, err := b.Context.APIClient.GetUser(userID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err))
		return
	}

	newStatus := !user.IsAdmin
	req := api.UpdateUserRequest{
		IsAdmin: &newStatus,
	}

	updatedUser, err := b.Context.APIClient.UpdateUser(userID, req)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: %v", err))
		return
	}

	roleText := "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
	if !updatedUser.IsAdmin {
		roleText = "–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
	}

	text := fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Ç–µ–ø–µ—Ä—å %s", updatedUser.Fullname, roleText)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboards.BackKeyboard(fmt.Sprintf("edit_user_%s", userID))
	b.API.Send(msg)
}
