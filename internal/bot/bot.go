package bot

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/WhoYa/subscription-manager/internal/bot/api"
	"github.com/WhoYa/subscription-manager/internal/bot/keyboards"
	"github.com/WhoYa/subscription-manager/internal/bot/types"
)

// Bot –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ—Ç–∞
type Bot struct {
	API     *tgbotapi.BotAPI
	Context *types.BotContext
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(token, apiBaseURL string, adminUserIDs []int64) (*Bot, error) {
	botAPI, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	botAPI.Debug = false

	// –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
	apiClient := api.NewClient(apiBaseURL)

	log.Printf("Bot initialized with %d admin user(s): %v", len(adminUserIDs), adminUserIDs)

	context := &types.BotContext{
		Bot:          botAPI,
		APIClient:    apiClient,
		APIBaseURL:   apiBaseURL,
		UserStates:   make(map[int64]*types.UserData),
		AdminUserIDs: adminUserIDs,
	}

	return &Bot{
		API:     botAPI,
		Context: context,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() error {
	log.Printf("Authorized on account %s", b.API.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.API.GetUpdatesChan(u)

	for update := range updates {
		b.handleUpdate(update)
	}

	return nil
}

// handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (b *Bot) handleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		b.handleMessage(update.Message)
	} else if update.CallbackQuery != nil {
		b.handleCallbackQuery(update.CallbackQuery)
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	if !b.isAdmin(message.From.ID) {
		b.sendSimpleMessage(message.Chat.ID, MessageNoAccess)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userState := b.getUserState(message.From.ID)

	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	log.Printf("Received message from user %d (state: %s): %s", message.From.ID, userState.State, message.Text)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		b.handleCommand(message)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
	switch userState.State {
	case types.StateAwaitingSubscriptionName:
		b.handleSubscriptionNameInput(message)
	case types.StateAwaitingSubscriptionPrice:
		b.handleSubscriptionPriceInput(message)
	case types.StateAwaitingSubscriptionCurrency:
		// –í–∞–ª—é—Ç–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback, –Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ,
		// –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
		log.Printf("User %d sent message in currency selection state: %s", message.From.ID, message.Text)
		b.sendSimpleMessage(message.Chat.ID, "üí± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
	case types.StateAwaitingSubscriptionPeriod:
		b.handleSubscriptionPeriodInput(message)
	case types.StateAwaitingUserFullname:
		b.handleUserFullnameInput(message)
	case types.StateAwaitingUserTGID:
		b.handleUserTGIDInput(message)
	case types.StateAwaitingUserUsername:
		b.handleUserUsernameInput(message)
	case types.StateAwaitingGlobalMarkup:
		b.handleGlobalMarkupInput(message)
	case types.StateEditingSubscriptionName:
		b.handleEditSubscriptionNameInput(message)
	case types.StateEditingSubscriptionPrice:
		b.handleEditSubscriptionPriceInput(message)
	case types.StateEditingSubscriptionCurrency:
		// –í–∞–ª—é—Ç–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback, –Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ,
		// –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
		log.Printf("User %d sent message in currency editing state: %s", message.From.ID, message.Text)
		b.sendSimpleMessage(message.Chat.ID, "üí± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
	case types.StateEditingSubscriptionPeriod:
		b.handleEditSubscriptionPeriodInput(message)
	case types.StateEditingUserFullname:
		b.handleEditUserFullnameInput(message)
	case types.StateEditingUserUsername:
		b.handleEditUserUsernameInput(message)
	default:
		log.Printf("User %d sent message in unhandled state %s: %s", message.From.ID, userState.State, message.Text)
		b.sendSimpleMessage(message.Chat.ID, MessageUseStart)
	}
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) handleCommand(message *tgbotapi.Message) {
	switch message.Command() {
	case "start", "menu":
		// –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
		if message.Command() == "start" {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ —Å–ø–∏—Å–∫–µ
			if b.isAdmin(message.From.ID) {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
				user, err := b.Context.APIClient.FindUserByTGID(message.From.ID)
				if err != nil {
					// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
					log.Printf("Admin user not found in database, creating...")
					_, err := b.getOrCreateAdminUser(message.From.ID, message.From.FirstName, message.From.LastName, message.From.UserName)
					if err != nil {
						log.Printf("Failed to create/find admin user: %v", err)
						b.sendSimpleMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
						return
					}
				} else if !user.IsAdmin {
					// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω, –ø–æ–≤—ã—à–∞–µ–º –µ–≥–æ
					log.Printf("User exists but not admin, promoting to admin...")
					_, err := b.getOrCreateAdminUser(message.From.ID, message.From.FirstName, message.From.LastName, message.From.UserName)
					if err != nil {
						log.Printf("Failed to promote user to admin: %v", err)
						b.sendSimpleMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
						return
					}
				}
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
			}
		}
		b.showMainMenu(message.Chat.ID, message.From.ID)
	case "help":
		b.handleHelpCommand(message)
	default:
		b.sendSimpleMessage(message.Chat.ID, MessageUnknownCommand)
	}
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelpCommand(message *tgbotapi.Message) {
	helpText := `
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚öôÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞–¥–±–∞–≤–∫–∏
üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–±—ã–ª–∏

–ö–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start`

	b.sendSimpleMessage(message.Chat.ID, helpText)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã
func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	if !b.isAdmin(query.From.ID) {
		b.answerCallbackQuery(query.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return
	}

	b.answerCallbackQuery(query.ID, "")

	switch query.Data {
	case "main_menu":
		b.showMainMenu(query.Message.Chat.ID, query.From.ID)
	case "main_menu_edit":
		b.showMainMenuEdit(query.Message.Chat.ID, query.Message.MessageID, query.From.ID)
	case "manage_subscriptions":
		b.showSubscriptionManagementEdit(query.Message.Chat.ID, query.Message.MessageID)
	case "manage_subscriptions_edit":
		b.showSubscriptionManagementEdit(query.Message.Chat.ID, query.Message.MessageID)
	case "manage_users":
		b.showUserManagementEdit(query.Message.Chat.ID, query.Message.MessageID)
	case "manage_users_edit":
		b.showUserManagementEdit(query.Message.Chat.ID, query.Message.MessageID)
	case "global_settings":
		b.showGlobalSettingsEdit(query.Message.Chat.ID, query.Message.MessageID)
	case "global_settings_edit":
		b.showGlobalSettingsEdit(query.Message.Chat.ID, query.Message.MessageID)
	case "analytics":
		b.showAnalyticsEdit(query.Message.Chat.ID, query.Message.MessageID)
	case "analytics_edit":
		b.showAnalyticsEdit(query.Message.Chat.ID, query.Message.MessageID)
	case "create_subscription":
		b.startCreateSubscription(query.From.ID, query.Message.Chat.ID, query.Message.MessageID)
	case "create_user":
		b.startCreateUser(query.From.ID, query.Message.Chat.ID, query.Message.MessageID)
	case "edit_global_markup":
		b.startEditGlobalMarkup(query.From.ID, query.Message.Chat.ID, query.Message.MessageID)
	case "list_subscriptions":
		b.handleListSubscriptions(query.Message.Chat.ID)
	case "list_subscriptions_edit":
		b.handleListSubscriptionsEdit(query.Message.Chat.ID, query.Message.MessageID)
	case "list_users":
		b.handleListUsers(query.Message.Chat.ID)
	case "list_users_edit":
		b.handleListUsersEdit(query.Message.Chat.ID, query.Message.MessageID)
	case "analytics_total":
		b.handleAnalyticsTotal(query.Message.Chat.ID, query.From.ID)
	case "analytics_monthly":
		b.handleAnalyticsMonthly(query.Message.Chat.ID, query.From.ID)
	case "analytics_users":
		b.handleAnalyticsUsers(query.Message.Chat.ID, query.From.ID)
	case "analytics_subscriptions":
		b.handleAnalyticsSubscriptions(query.Message.Chat.ID, query.From.ID)
	case "edit_subscription":
		b.handleEditSubscription(query.Message.Chat.ID, query.Message.MessageID)
	case "edit_user":
		b.handleEditUser(query.Message.Chat.ID, query.Message.MessageID)
	case "cancel":
		b.cancelCurrentOperation(query.From.ID, query.Message.Chat.ID)
	case "step_back":
		b.handleStepBack(query.From.ID, query.Message.Chat.ID)
	default:
		if strings.HasPrefix(query.Data, "currency_") {
			b.handleCurrencySelection(query)
		} else if strings.HasPrefix(query.Data, "confirm_") {
			b.handleConfirmation(query)
		} else if strings.HasPrefix(query.Data, "edit_sub_") {
			b.handleEditSubscriptionCallback(query)
		} else if strings.HasPrefix(query.Data, "edit_user_") {
			b.handleEditUserCallback(query)
		} else if strings.HasPrefix(query.Data, "toggle_") {
			b.handleToggleCallback(query)
		} else {
			b.sendSimpleMessage(query.Message.Chat.ID, "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
		}
	}
}

// showMainMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (b *Bot) showMainMenu(chatID int64, userID ...int64) {
	var firstName string

	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram API
	if len(userID) > 0 {
		user, err := b.API.GetChat(tgbotapi.ChatInfoConfig{ChatConfig: tgbotapi.ChatConfig{ChatID: userID[0]}})
		if err == nil {
			firstName = user.FirstName
		}
	}

	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω userID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if firstName == "" {
		firstName = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
	}

	// –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º
	greeting := fmt.Sprintf("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏!\n\n–ü—Ä–∏–≤–µ—Ç, %s!\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", firstName)

	msg := tgbotapi.NewMessage(chatID, greeting)
	msg.ReplyMarkup = keyboards.MainAdminKeyboard()
	b.API.Send(msg)

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if len(userID) > 0 {
		b.setUserState(userID[0], types.StateIdle)
	}
}

// showMainMenuEdit –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) showMainMenuEdit(chatID int64, messageID int, userID int64) {
	var firstName string

	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram API
	user, err := b.API.GetChat(tgbotapi.ChatInfoConfig{ChatConfig: tgbotapi.ChatConfig{ChatID: userID}})
	if err == nil {
		firstName = user.FirstName
	}

	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if firstName == "" {
		firstName = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
	}

	// –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º
	greeting := fmt.Sprintf("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏!\n\n–ü—Ä–∏–≤–µ—Ç, %s!\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", firstName)

	keyboard := keyboards.MainAdminKeyboard()
	b.editMessage(chatID, messageID, greeting, &keyboard)

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.setUserState(userID, types.StateIdle)
}

// showSubscriptionManagement –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
func (b *Bot) showSubscriptionManagement(chatID int64) {
	b.showMenu(chatID, 0, "subscriptions")
}

// showSubscriptionManagementEdit –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
func (b *Bot) showSubscriptionManagementEdit(chatID int64, messageID int) {
	b.showMenu(chatID, messageID, "subscriptions")
}

// showUserManagement –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
func (b *Bot) showUserManagement(chatID int64) {
	b.showMenu(chatID, 0, "users")
}

// showUserManagementEdit –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
func (b *Bot) showUserManagementEdit(chatID int64, messageID int) {
	b.showMenu(chatID, messageID, "users")
}

// showGlobalSettings –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
func (b *Bot) showGlobalSettings(chatID int64) {
	b.showMenu(chatID, 0, "global_settings")
}

// showGlobalSettingsEdit –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
func (b *Bot) showGlobalSettingsEdit(chatID int64, messageID int) {
	b.showMenu(chatID, messageID, "global_settings")
}

// showAnalyticsEdit –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
func (b *Bot) showAnalyticsEdit(chatID int64, messageID int) {
	b.showMenu(chatID, messageID, "analytics")
}

// showMenu —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
func (b *Bot) showMenu(chatID int64, messageID int, menuType string) {
	var text string
	var keyboard tgbotapi.InlineKeyboardMarkup

	switch menuType {
	case "subscriptions":
		text = "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
		keyboard = keyboards.SubscriptionManagementKeyboard()
	case "users":
		text = "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
		keyboard = keyboards.UserManagementKeyboard()
	case "global_settings":
		// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
		settings, err := b.Context.APIClient.GetGlobalSettings()
		if err != nil {
			text = "‚öôÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.\n\n–°–æ–∑–¥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "edit_global_markup"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "main_menu_edit"),
				),
			)
		} else {
			text = fmt.Sprintf("‚öôÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–¢–µ–∫—É—â–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞: %.2f%%\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", settings.GlobalMarkupPercent)
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–¥–±–∞–≤–∫—É", "edit_global_markup"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "global_settings_edit"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "main_menu_edit"),
				),
			)
		}
	case "analytics":
		text = "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"
		keyboard = keyboards.AnalyticsKeyboard()
	default:
		text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–Ω—é"
		keyboard = keyboards.MainAdminKeyboard()
	}

	if messageID != 0 {
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		b.editMessage(chatID, messageID, text, &keyboard)
	} else {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = keyboard
		sent, err := b.API.Send(msg)
		if err == nil {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			userState := b.getUserState(chatID)
			userState.CurrentMessageID = sent.MessageID
			userState.CurrentChatID = chatID
		}
	}
}

// Utility functions

// isAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
func (b *Bot) isAdmin(userID int64) bool {
	for _, adminID := range b.Context.AdminUserIDs {
		if adminID == userID {
			return true
		}
	}
	return false
}

// getUserState –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) getUserState(userID int64) *types.UserData {
	if state, exists := b.Context.UserStates[userID]; exists {
		return state
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
	newState := &types.UserData{
		State: types.StateIdle,
	}
	b.Context.UserStates[userID] = newState
	return newState
}

// setUserState —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) setUserState(userID int64, state types.UserState) {
	userState := b.getUserState(userID)
	userState.State = state
}

// answerCallbackQuery –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
func (b *Bot) answerCallbackQuery(queryID, text string) {
	callback := tgbotapi.NewCallback(queryID, text)
	b.API.Request(callback)
}

// getOrCreateAdminUser –Ω–∞—Ö–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∞ –≤ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –µ—Å–ª–∏ –æ–Ω –∞–¥–º–∏–Ω
func (b *Bot) getOrCreateAdminUser(tgID int64, firstName, lastName, username string) (*api.User, error) {
	log.Printf("Getting admin user info for TGID: %d", tgID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ —Å–ø–∏—Å–∫–µ ADMINS
	if !b.isAdmin(tgID) {
		log.Printf("User %d not in admin list", tgID)
		return nil, fmt.Errorf("user with TGID %d not found", tgID)
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := b.Context.APIClient.FindUserByTGID(tgID)
	if err == nil {
		log.Printf("Found existing user: %s (ID: %s, IsAdmin: %t)", user.Fullname, user.ID, user.IsAdmin)

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
		if user.IsAdmin {
			log.Printf("User %s is already admin, no upgrade needed", user.Fullname)
			return user, nil
		}

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤, –ø–æ–≤—ã—à–∞–µ–º –µ–≥–æ
		log.Printf("User %d is in admin list but not admin in DB ‚Äì updating role", tgID)
		isAdmin := true
		updateReq := api.UpdateUserRequest{IsAdmin: &isAdmin}
		updated, upErr := b.Context.APIClient.UpdateUser(user.ID, updateReq)
		if upErr != nil {
			log.Printf("Failed to update user role: %v", upErr)
			return user, nil // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å
		} else {
			log.Printf("Successfully promoted user %s to admin", updated.Fullname)
			return updated, nil
		}
	}

	log.Printf("User not found in database: %v", err)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û –∏–∑ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
	fullname := firstName
	if lastName != "" {
		fullname = fmt.Sprintf("%s %s", firstName, lastName)
	}
	if fullname == "" {
		fullname = fmt.Sprintf("Admin %d", tgID)
	}

	log.Printf("Creating new admin user: %s (TGID: %d)", fullname, tgID)

	// –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	req := api.CreateUserRequest{
		TGID:     tgID,
		Username: username,
		Fullname: fullname,
		IsAdmin:  true,
	}

	user, err = b.Context.APIClient.CreateUser(req)
	if err != nil {
		log.Printf("Failed to create user: %v", err)

		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 409 (–¥—É–±–ª–∏–∫–∞—Ç TGID), –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ —Ä–∞–∑
		if strings.Contains(err.Error(), "409") || strings.Contains(err.Error(), "duplicate") {
			log.Printf("Duplicate TGID error, trying to find user again")
			user, findErr := b.Context.APIClient.FindUserByTGID(tgID)
			if findErr == nil {
				log.Printf("Found existing user after duplicate error: %s (ID: %s, IsAdmin: %t)", user.Fullname, user.ID, user.IsAdmin)
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–¥–º–∏–Ω–æ–º
				if !user.IsAdmin {
					log.Printf("User found but not admin, upgrading...")
					isAdmin := true
					updateReq := api.UpdateUserRequest{IsAdmin: &isAdmin}
					updated, upErr := b.Context.APIClient.UpdateUser(user.ID, updateReq)
					if upErr != nil {
						log.Printf("Failed to update user role: %v", upErr)
						return user, nil
					} else {
						log.Printf("Successfully promoted user %s to admin", updated.Fullname)
						return updated, nil
					}
				}
				return user, nil
			}
			log.Printf("Still couldn't find user after duplicate error: %v", findErr)
		}

		return nil, fmt.Errorf("failed to create admin user: %w", err)
	}

	log.Printf("Successfully created admin user: %s (ID: %s)", user.Fullname, user.ID)
	return user, nil
}

// handleCurrencySelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
func (b *Bot) handleCurrencySelection(query *tgbotapi.CallbackQuery) {
	userState := b.getUserState(query.From.ID)
	currency := strings.TrimPrefix(query.Data, "currency_")

	log.Printf("User %d selected currency: %s in state: %s", query.From.ID, currency, userState.State)

	switch userState.State {
	case types.StateAwaitingSubscriptionCurrency:
		// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
		if userState.SubscriptionData == nil {
			log.Printf("ERROR: SubscriptionData is nil for user %d", query.From.ID)
			text := "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
			keyboard := keyboards.CreateSuccessKeyboard("manage_subscriptions")
			b.editMessage(userState.CurrentChatID, userState.CurrentMessageID, text, &keyboard)
			return
		}

		log.Printf("Setting currency for subscription. Before: %+v", userState.SubscriptionData)
		userState.SubscriptionData.BaseCurrency = currency
		userState.State = types.StateAwaitingSubscriptionPeriod
		log.Printf("Setting currency for subscription. After: %+v", userState.SubscriptionData)

		text := fmt.Sprintf("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n**–®–∞–≥ 4/4:** –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è –≤ –¥–Ω—è—Ö\n\n‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n‚úÖ –¶–µ–Ω–∞: %.2f %s\n\n*–ù–∞–ø—Ä–∏–º–µ—Ä: 30 –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*",
			userState.SubscriptionData.ServiceName, userState.SubscriptionData.BasePrice, currency)
		keyboard := keyboards.CreateProcessKeyboard("process")
		b.editMessage(userState.CurrentChatID, userState.CurrentMessageID, text, &keyboard)

	case types.StateEditingSubscriptionCurrency:
		// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
		if userState.EditData == nil {
			text := "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
			keyboard := keyboards.CreateSuccessKeyboard("manage_subscriptions")
			b.editMessage(userState.CurrentChatID, userState.CurrentMessageID, text, &keyboard)
			return
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
		req := api.UpdateSubscriptionRequest{
			BaseCurrency: &currency,
		}

		subscription, err := b.Context.APIClient.UpdateSubscription(userState.EditData.EntityID, req)
		if err != nil {
			text := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
			keyboard := keyboards.CreateSuccessKeyboard("manage_subscriptions")
			b.editMessage(userState.CurrentChatID, userState.CurrentMessageID, text, &keyboard)
			return
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		userState.State = types.StateIdle
		userState.EditData = nil

		text := fmt.Sprintf("‚úÖ –í–∞–ª—é—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: %s", subscription.BaseCurrency)
		keyboard := keyboards.CreateSuccessKeyboard(fmt.Sprintf("edit_sub_%s", subscription.ID))
		b.editMessage(userState.CurrentChatID, userState.CurrentMessageID, text, &keyboard)

	default:
		text := "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
		keyboard := keyboards.CreateSuccessKeyboard("main_menu")
		b.editMessage(userState.CurrentChatID, userState.CurrentMessageID, text, &keyboard)
	}
}

// editMessage —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *Bot) editMessage(chatID int64, messageID int, text string, keyboard *tgbotapi.InlineKeyboardMarkup) {
	edit := tgbotapi.NewEditMessageText(chatID, messageID, text)
	if keyboard != nil {
		edit.ReplyMarkup = keyboard
	}
	b.API.Send(edit)
}

// getAdminUser –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ –∏–∑ Telegram –∏ —Å–æ–∑–¥–∞–µ—Ç/–Ω–∞—Ö–æ–¥–∏—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
func (b *Bot) getAdminUser(adminUserID int64) (*api.User, error) {
	log.Printf("Getting admin user info for TGID: %d", adminUserID)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
	user, err := b.API.GetChat(tgbotapi.ChatInfoConfig{ChatConfig: tgbotapi.ChatConfig{ChatID: adminUserID}})
	if err != nil {
		log.Printf("Failed to get user info from Telegram: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: %w", err)
	}

	log.Printf("Got Telegram user info: %s %s (@%s)", user.FirstName, user.LastName, user.UserName)

	// –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
	adminUser, err := b.getOrCreateAdminUser(adminUserID, user.FirstName, user.LastName, user.UserName)
	if err != nil {
		log.Printf("Failed to get/create admin user: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}

	log.Printf("Successfully got admin user: %s (ID: %s)", adminUser.Fullname, adminUser.ID)
	return adminUser, nil
}
