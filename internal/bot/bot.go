package bot

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/WhoYa/subscription-manager/internal/bot/api"
	"github.com/WhoYa/subscription-manager/internal/bot/keyboards"
	"github.com/WhoYa/subscription-manager/internal/bot/types"
)

// Bot –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ—Ç–∞
type Bot struct {
	API     *tgbotapi.BotAPI
	Context *types.BotContext
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(token, apiBaseURL string, adminUserIDs []int64) (*Bot, error) {
	botAPI, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	botAPI.Debug = false

	// –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
	apiClient := api.NewClient(apiBaseURL)

	context := &types.BotContext{
		Bot:          botAPI,
		APIClient:    apiClient,
		APIBaseURL:   apiBaseURL,
		UserStates:   make(map[int64]*types.UserData),
		AdminUserIDs: adminUserIDs,
	}

	return &Bot{
		API:     botAPI,
		Context: context,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() error {
	log.Printf("Authorized on account %s", b.API.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.API.GetUpdatesChan(u)

	for update := range updates {
		b.handleUpdate(update)
	}

	return nil
}

// handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (b *Bot) handleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		b.handleMessage(update.Message)
	} else if update.CallbackQuery != nil {
		b.handleCallbackQuery(update.CallbackQuery)
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	if !b.isAdmin(message.From.ID) {
		b.sendMessage(message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userState := b.getUserState(message.From.ID)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		b.handleCommand(message)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
	switch userState.State {
	case types.StateAwaitingSubscriptionName:
		b.handleSubscriptionNameInput(message)
	case types.StateAwaitingSubscriptionPrice:
		b.handleSubscriptionPriceInput(message)
	case types.StateAwaitingSubscriptionPeriod:
		b.handleSubscriptionPeriodInput(message)
	case types.StateAwaitingUserFullname:
		b.handleUserFullnameInput(message)
	case types.StateAwaitingUserTGID:
		b.handleUserTGIDInput(message)
	case types.StateAwaitingUserUsername:
		b.handleUserUsernameInput(message)
	case types.StateAwaitingGlobalMarkup:
		b.handleGlobalMarkupInput(message)
	default:
		b.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")
	}
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) handleCommand(message *tgbotapi.Message) {
	switch message.Command() {
	case "start":
		b.handleStartCommand(message)
	case "help":
		b.handleHelpCommand(message)
	case "menu":
		b.showMainMenu(message.Chat.ID)
	default:
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStartCommand(message *tgbotapi.Message) {
	welcomeText := fmt.Sprintf(`
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏!

–ü—Ä–∏–≤–µ—Ç, %s!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`, message.From.FirstName)

	msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
	msg.ReplyMarkup = keyboards.MainAdminKeyboard()
	b.API.Send(msg)

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.setUserState(message.From.ID, types.StateIdle)
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelpCommand(message *tgbotapi.Message) {
	helpText := `
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚öôÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞–¥–±–∞–≤–∫–∏
üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–±—ã–ª–∏

–ö–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start`

	b.sendMessage(message.Chat.ID, helpText)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã
func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	if !b.isAdmin(query.From.ID) {
		b.answerCallbackQuery(query.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
		return
	}

	b.answerCallbackQuery(query.ID, "")

	switch query.Data {
	case "main_menu":
		b.showMainMenu(query.Message.Chat.ID)
	case "manage_subscriptions":
		b.showSubscriptionManagement(query.Message.Chat.ID)
	case "manage_users":
		b.showUserManagement(query.Message.Chat.ID)
	case "global_settings":
		b.showGlobalSettings(query.Message.Chat.ID)
	case "analytics":
		b.showAnalytics(query.Message.Chat.ID)
	case "create_subscription":
		b.startCreateSubscription(query.From.ID, query.Message.Chat.ID)
	case "create_user":
		b.startCreateUser(query.From.ID, query.Message.Chat.ID)
	case "edit_global_markup":
		b.startEditGlobalMarkup(query.From.ID, query.Message.Chat.ID)
	case "list_subscriptions":
		b.handleListSubscriptions(query.Message.Chat.ID)
	case "list_users":
		b.handleListUsers(query.Message.Chat.ID)
	case "analytics_total":
		b.handleAnalyticsTotal(query.Message.Chat.ID, query.From.ID)
	case "analytics_monthly":
		b.handleAnalyticsMonthly(query.Message.Chat.ID, query.From.ID)
	case "cancel":
		b.cancelCurrentOperation(query.From.ID, query.Message.Chat.ID)
	default:
		if strings.HasPrefix(query.Data, "currency_") {
			b.handleCurrencySelection(query)
		} else if strings.HasPrefix(query.Data, "confirm_") {
			b.handleConfirmation(query)
		} else {
			b.sendMessage(query.Message.Chat.ID, "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
		}
	}
}

// showMainMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (b *Bot) showMainMenu(chatID int64) {
	text := `
üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboards.MainAdminKeyboard()
	b.API.Send(msg)
}

// showSubscriptionManagement –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
func (b *Bot) showSubscriptionManagement(chatID int64) {
	text := `
üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboards.SubscriptionManagementKeyboard()
	b.API.Send(msg)
}

// showUserManagement –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
func (b *Bot) showUserManagement(chatID int64) {
	text := `
üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboards.UserManagementKeyboard()
	b.API.Send(msg)
}

// showGlobalSettings –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
func (b *Bot) showGlobalSettings(chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ API
	settings, err := b.Context.APIClient.GetGlobalSettings()
	if err != nil {
		text := fmt.Sprintf(`
‚öôÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: %v

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, err)

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–¥–±–∞–≤–∫—É", "edit_global_markup"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "global_settings"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "main_menu"),
			),
		)

		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = keyboard
		b.API.Send(msg)
		return
	}

	text := fmt.Sprintf(`
‚öôÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

–¢–µ–∫—É—â–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞: %.2f%%

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, settings.GlobalMarkupPercent)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–¥–±–∞–≤–∫—É", "edit_global_markup"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "global_settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "main_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	b.API.Send(msg)
}

// showAnalytics –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
func (b *Bot) showAnalytics(chatID int64) {
	text := `
üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboards.AnalyticsKeyboard()
	b.API.Send(msg)
}

// Utility functions

// isAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
func (b *Bot) isAdmin(userID int64) bool {
	for _, adminID := range b.Context.AdminUserIDs {
		if adminID == userID {
			return true
		}
	}
	return false
}

// getUserState –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) getUserState(userID int64) *types.UserData {
	if state, exists := b.Context.UserStates[userID]; exists {
		return state
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
	newState := &types.UserData{
		State: types.StateIdle,
	}
	b.Context.UserStates[userID] = newState
	return newState
}

// setUserState —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) setUserState(userID int64, state types.UserState) {
	userState := b.getUserState(userID)
	userState.State = state
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	b.API.Send(msg)
}

// answerCallbackQuery –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
func (b *Bot) answerCallbackQuery(queryID, text string) {
	callback := tgbotapi.NewCallback(queryID, text)
	b.API.Request(callback)
}
