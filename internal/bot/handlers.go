package bot

import (
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/WhoYa/subscription-manager/internal/bot/api"
	"github.com/WhoYa/subscription-manager/internal/bot/keyboards"
	"github.com/WhoYa/subscription-manager/internal/bot/types"
)

// Subscription handlers

// startCreateSubscription –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) startCreateSubscription(userID, chatID int64) {
	userState := b.getUserState(userID)
	userState.State = types.StateAwaitingSubscriptionName
	userState.SubscriptionData = &types.SubscriptionCreateData{}

	b.sendMessage(chatID, "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Netflix, Spotify):")
}

// handleSubscriptionNameInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) handleSubscriptionNameInput(message *tgbotapi.Message) {
	userState := b.getUserState(message.From.ID)

	serviceName := strings.TrimSpace(message.Text)
	if serviceName == "" {
		b.sendMessage(message.Chat.ID, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
		return
	}

	userState.SubscriptionData.ServiceName = serviceName
	userState.State = types.StateAwaitingSubscriptionPrice

	b.sendMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9.99):", serviceName))
}

// handleSubscriptionPriceInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) handleSubscriptionPriceInput(message *tgbotapi.Message) {
	userState := b.getUserState(message.From.ID)

	priceStr := strings.TrimSpace(message.Text)
	price, err := strconv.ParseFloat(priceStr, 64)
	if err != nil || price <= 0 {
		b.sendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9.99):")
		return
	}

	userState.SubscriptionData.BasePrice = price
	userState.State = types.StateAwaitingSubscriptionCurrency

	text := fmt.Sprintf("‚úÖ –¶–µ–Ω–∞: %.2f\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", price)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboards.CurrencyKeyboard()
	b.API.Send(msg)
}

// handleCurrencySelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
func (b *Bot) handleCurrencySelection(query *tgbotapi.CallbackQuery) {
	userState := b.getUserState(query.From.ID)

	if userState.State != types.StateAwaitingSubscriptionCurrency {
		b.sendMessage(query.Message.Chat.ID, "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
		return
	}

	currency := strings.TrimPrefix(query.Data, "currency_")
	userState.SubscriptionData.BaseCurrency = currency
	userState.State = types.StateAwaitingSubscriptionPeriod

	text := fmt.Sprintf("‚úÖ –í–∞–ª—é—Ç–∞: %s\n\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30 –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏):", currency)
	b.sendMessage(query.Message.Chat.ID, text)
}

// handleSubscriptionPeriodInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) handleSubscriptionPeriodInput(message *tgbotapi.Message) {
	userState := b.getUserState(message.From.ID)

	periodStr := strings.TrimSpace(message.Text)
	period, err := strconv.Atoi(periodStr)
	if err != nil || period <= 0 {
		b.sendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
		return
	}

	userState.SubscriptionData.PeriodDays = period

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	data := userState.SubscriptionData
	text := fmt.Sprintf(`
üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:

üè∑Ô∏è –°–µ—Ä–≤–∏—Å: %s
üí∞ –¶–µ–Ω–∞: %.2f %s
üìÖ –ü–µ—Ä–∏–æ–¥: %d –¥–Ω–µ–π

–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?`, data.ServiceName, data.BasePrice, data.BaseCurrency, data.PeriodDays)

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboards.ConfirmKeyboard("create_subscription")
	b.API.Send(msg)
}

// User handlers

// startCreateUser –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) startCreateUser(userID, chatID int64) {
	userState := b.getUserState(userID)
	userState.State = types.StateAwaitingUserFullname
	userState.UserCreateData = &types.UserCreateData{}

	b.sendMessage(chatID, "üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
}

// handleUserFullnameInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) handleUserFullnameInput(message *tgbotapi.Message) {
	userState := b.getUserState(message.From.ID)

	fullname := strings.TrimSpace(message.Text)
	if fullname == "" {
		b.sendMessage(message.Chat.ID, "‚ùå –§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
		return
	}

	userState.UserCreateData.Fullname = fullname
	userState.State = types.StateAwaitingUserTGID

	b.sendMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –§–ò–û: %s\n\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ–≤–æ–π ID):", fullname))
}

// handleUserTGIDInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) handleUserTGIDInput(message *tgbotapi.Message) {
	userState := b.getUserState(message.From.ID)

	tgidStr := strings.TrimSpace(message.Text)
	tgid, err := strconv.ParseInt(tgidStr, 10, 64)
	if err != nil || tgid <= 0 {
		b.sendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
		return
	}

	userState.UserCreateData.TGID = tgid
	userState.State = types.StateAwaitingUserUsername

	b.sendMessage(message.Chat.ID, fmt.Sprintf("‚úÖ Telegram ID: %d\n\n–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):", tgid))
}

// handleUserUsernameInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) handleUserUsernameInput(message *tgbotapi.Message) {
	userState := b.getUserState(message.From.ID)

	username := strings.TrimSpace(message.Text)
	// Username –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
	userState.UserCreateData.Username = username

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	data := userState.UserCreateData
	usernameText := "–Ω–µ —É–∫–∞–∑–∞–Ω"
	if username != "" {
		usernameText = "@" + username
	}

	text := fmt.Sprintf(`
üë§ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üë§ –§–ò–û: %s
üÜî Telegram ID: %d
üìù Username: %s

–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?`, data.Fullname, data.TGID, usernameText)

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboards.ConfirmKeyboard("create_user")
	b.API.Send(msg)
}

// Global settings handlers

// startEditGlobalMarkup –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –Ω–∞–¥–±–∞–≤–∫–∏
func (b *Bot) startEditGlobalMarkup(userID, chatID int64) {
	userState := b.getUserState(userID)
	userState.State = types.StateAwaitingGlobalMarkup

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	settings, err := b.Context.APIClient.GetGlobalSettings()
	currentMarkup := "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
	if err == nil {
		currentMarkup = fmt.Sprintf("%.2f%%", settings.GlobalMarkupPercent)
	}

	text := fmt.Sprintf(`
üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –Ω–∞–¥–±–∞–≤–∫–∏

–¢–µ–∫—É—â–∞—è –Ω–∞–¥–±–∞–≤–∫–∞: %s

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–¥–±–∞–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.5):`, currentMarkup)

	b.sendMessage(chatID, text)
}

// handleGlobalMarkupInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –Ω–∞–¥–±–∞–≤–∫–∏
func (b *Bot) handleGlobalMarkupInput(message *tgbotapi.Message) {
	markupStr := strings.TrimSpace(message.Text)
	markup, err := strconv.ParseFloat(markupStr, 64)
	if err != nil || markup < 0 {
		b.sendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–¥–±–∞–≤–∫–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 0:")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ API
	req := api.UpdateGlobalSettingsRequest{
		GlobalMarkupPercent: markup,
	}

	settings, err := b.Context.APIClient.UpdateGlobalSettings(req)
	if err != nil {
		b.sendMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: %v", err))
		return
	}

	b.setUserState(message.From.ID, types.StateIdle)

	text := fmt.Sprintf("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %.2f%%", settings.GlobalMarkupPercent)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboards.BackKeyboard("global_settings")
	b.API.Send(msg)
}

// General handlers

// handleConfirmation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
func (b *Bot) handleConfirmation(query *tgbotapi.CallbackQuery) {
	action := strings.TrimPrefix(query.Data, "confirm_")
	userState := b.getUserState(query.From.ID)

	switch action {
	case "create_subscription":
		b.confirmCreateSubscription(query.From.ID, query.Message.Chat.ID, userState)
	case "create_user":
		b.confirmCreateUser(query.From.ID, query.Message.Chat.ID, userState)
	default:
		b.sendMessage(query.Message.Chat.ID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
	}
}

// confirmCreateSubscription –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) confirmCreateSubscription(userID, chatID int64, userState *types.UserData) {
	if userState.SubscriptionData == nil {
		b.sendMessage(chatID, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	data := userState.SubscriptionData

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ API
	req := api.CreateSubscriptionRequest{
		ServiceName:  data.ServiceName,
		BasePrice:    data.BasePrice,
		BaseCurrency: data.BaseCurrency,
		PeriodDays:   data.PeriodDays,
	}

	subscription, err := b.Context.APIClient.CreateSubscription(req)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err))
		return
	}

	text := fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\nüí∞ –¶–µ–Ω–∞: %.2f %s\nüìÖ –ü–µ—Ä–∏–æ–¥: %d –¥–Ω–µ–π\nüÜî ID: %s",
		subscription.ServiceName, subscription.BasePrice, subscription.BaseCurrency, subscription.PeriodDays, subscription.ID)

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	userState.State = types.StateIdle
	userState.SubscriptionData = nil

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboards.BackKeyboard("manage_subscriptions")
	b.API.Send(msg)
}

// confirmCreateUser –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) confirmCreateUser(userID, chatID int64, userState *types.UserData) {
	if userState.UserCreateData == nil {
		b.sendMessage(chatID, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	data := userState.UserCreateData

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
	req := api.CreateUserRequest{
		TGID:     data.TGID,
		Username: data.Username,
		Fullname: data.Fullname,
		IsAdmin:  false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∞–¥–º–∏–Ω
	}

	user, err := b.Context.APIClient.CreateUser(req)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err))
		return
	}

	usernameText := "–Ω–µ —É–∫–∞–∑–∞–Ω"
	if user.Username != "" {
		usernameText = "@" + user.Username
	}

	text := fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\nüë§ –§–ò–û: %s\nüÜî Telegram ID: %d\nüìù Username: %s\nüÜî ID: %s",
		user.Fullname, user.TGID, usernameText, user.ID)

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	userState.State = types.StateIdle
	userState.UserCreateData = nil

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboards.BackKeyboard("manage_users")
	b.API.Send(msg)
}

// cancelCurrentOperation –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
func (b *Bot) cancelCurrentOperation(userID, chatID int64) {
	userState := b.getUserState(userID)
	userState.State = types.StateIdle
	userState.SubscriptionData = nil
	userState.UserCreateData = nil
	userState.CurrentEntityID = ""

	b.sendMessage(chatID, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
	b.showMainMenu(chatID)
}
