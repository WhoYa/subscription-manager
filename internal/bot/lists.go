package bot

import (
	"fmt"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/WhoYa/subscription-manager/internal/bot/keyboards"
)

// Subscriptions list handlers

// handleListSubscriptions –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
func (b *Bot) handleListSubscriptions(chatID int64) {
	subscriptions, err := b.Context.APIClient.GetSubscriptions(25, 0)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: %v", err))
		return
	}

	if len(subscriptions) == 0 {
		text := `
üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫

üì≠ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É!`

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "create_subscription"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "manage_subscriptions"),
			),
		)

		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = keyboard
		b.API.Send(msg)
		return
	}

	var textBuilder strings.Builder
	textBuilder.WriteString("üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n\n")

	for i, sub := range subscriptions {
		status := "‚úÖ"
		if !sub.IsActive {
			status = "‚ùå"
		}

		textBuilder.WriteString(fmt.Sprintf("%d. %s %s\n", i+1, status, sub.ServiceName))
		textBuilder.WriteString(fmt.Sprintf("   üí∞ %.2f %s, –ø–µ—Ä–∏–æ–¥: %d –¥–Ω–µ–π\n",
			sub.BasePrice, sub.BaseCurrency, sub.PeriodDays))
		textBuilder.WriteString(fmt.Sprintf("   üÜî ID: %s\n\n", sub.ID))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "create_subscription"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "edit_subscription"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "list_subscriptions"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "manage_subscriptions"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, textBuilder.String())
	msg.ReplyMarkup = keyboard
	b.API.Send(msg)
}

// Users list handlers

// handleListUsers –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *Bot) handleListUsers(chatID int64) {
	users, err := b.Context.APIClient.GetUsers(25, 0)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err))
		return
	}

	if len(users) == 0 {
		text := `
üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "create_user"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "manage_users"),
			),
		)

		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = keyboard
		b.API.Send(msg)
		return
	}

	var textBuilder strings.Builder
	textBuilder.WriteString("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n")

	for i, user := range users {
		adminStatus := ""
		if user.IsAdmin {
			adminStatus = " üëë"
		}

		usernameText := ""
		if user.Username != "" {
			usernameText = fmt.Sprintf(" (@%s)", user.Username)
		}

		textBuilder.WriteString(fmt.Sprintf("%d. %s%s%s\n", i+1, user.Fullname, usernameText, adminStatus))
		textBuilder.WriteString(fmt.Sprintf("   üÜî TG ID: %d\n", user.TGID))
		textBuilder.WriteString(fmt.Sprintf("   üÜî ID: %s\n\n", user.ID))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "create_user"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "edit_user"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "list_users"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "manage_users"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, textBuilder.String())
	msg.ReplyMarkup = keyboard
	b.API.Send(msg)
}

// Analytics handlers

// handleAnalyticsTotal –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (b *Bot) handleAnalyticsTotal(chatID, adminUserID int64) {
	adminUser, err := b.getAdminUser(adminUserID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå %v", err))
		return
	}

	stats, err := b.Context.APIClient.GetTotalProfit(adminUser.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err))
		return
	}

	text := fmt.Sprintf(`
üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏

üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: %.2f —Ä—É–±.
üßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π: %d
üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –ø–ª–∞—Ç–µ–∂–∞: %.2f —Ä—É–±.`,
		stats.TotalProfit, stats.PaymentCount, stats.AverageProfit)

	keyboard := keyboards.BackKeyboard("analytics")

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	b.API.Send(msg)
}

// handleAnalyticsMonthly –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
func (b *Bot) handleAnalyticsMonthly(chatID, adminUserID int64) {
	adminUser, err := b.getAdminUser(adminUserID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå %v", err))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
	// –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑—å–º–µ–º 2024 –≥–æ–¥, 7 –º–µ—Å—è—Ü
	stats, err := b.Context.APIClient.GetMonthlyProfit(adminUser.ID, 2024, 7)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err))
		return
	}

	text := fmt.Sprintf(`
üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∏—é–ª—å 2024

üí∞ –ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü: %.2f —Ä—É–±.
üßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π: %d
üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –ø–ª–∞—Ç–µ–∂–∞: %.2f —Ä—É–±.`,
		stats.TotalProfit, stats.PaymentCount, stats.AverageProfit)

	keyboard := keyboards.BackKeyboard("analytics")

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	b.API.Send(msg)
}

// handleAnalyticsUsers –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (b *Bot) handleAnalyticsUsers(chatID, adminUserID int64) {
	adminUser, err := b.getAdminUser(adminUserID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå %v", err))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
	from, to := b.getLastMonthRange()
	stats, err := b.Context.APIClient.GetUserProfitStats(adminUser.ID, from, to)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err))
		return
	}

	if len(stats) == 0 {
		text := `üë• –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.`
		keyboard := keyboards.BackKeyboard("analytics")
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = keyboard
		b.API.Send(msg)
		return
	}

	var textBuilder strings.Builder
	textBuilder.WriteString("üë• –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n")
	textBuilder.WriteString(fmt.Sprintf("üìÖ –ü–µ—Ä–∏–æ–¥: %s - %s\n\n", from[:10], to[:10]))

	totalProfit := 0.0
	totalPayments := 0

	for i, stat := range stats {
		textBuilder.WriteString(fmt.Sprintf("%d. %s\n", i+1, stat.UserFullname))
		textBuilder.WriteString(fmt.Sprintf("   üí∞ –ü—Ä–∏–±—ã–ª—å: %.2f —Ä—É–±.\n", stat.TotalProfit))
		textBuilder.WriteString(fmt.Sprintf("   üßæ –ü–ª–∞—Ç–µ–∂–µ–π: %d\n\n", stat.PaymentCount))

		totalProfit += stat.TotalProfit
		totalPayments += stat.PaymentCount
	}

	textBuilder.WriteString(fmt.Sprintf("üìä –ò—Ç–æ–≥–æ: %.2f —Ä—É–±. (%d –ø–ª–∞—Ç–µ–∂–µ–π)", totalProfit, totalPayments))

	keyboard := keyboards.BackKeyboard("analytics")
	msg := tgbotapi.NewMessage(chatID, textBuilder.String())
	msg.ReplyMarkup = keyboard
	b.API.Send(msg)
}

// handleAnalyticsSubscriptions –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
func (b *Bot) handleAnalyticsSubscriptions(chatID, adminUserID int64) {
	adminUser, err := b.getAdminUser(adminUserID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå %v", err))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
	from, to := b.getLastMonthRange()
	stats, err := b.Context.APIClient.GetSubscriptionProfitStats(adminUser.ID, from, to)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err))
		return
	}

	if len(stats) == 0 {
		text := `üì± –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º

üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.`
		keyboard := keyboards.BackKeyboard("analytics")
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = keyboard
		b.API.Send(msg)
		return
	}

	var textBuilder strings.Builder
	textBuilder.WriteString("üì± –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º\n")
	textBuilder.WriteString(fmt.Sprintf("üìÖ –ü–µ—Ä–∏–æ–¥: %s - %s\n\n", from[:10], to[:10]))

	totalProfit := 0.0
	totalPayments := 0

	for i, stat := range stats {
		textBuilder.WriteString(fmt.Sprintf("%d. %s\n", i+1, stat.SubscriptionName))
		textBuilder.WriteString(fmt.Sprintf("   üí∞ –ü—Ä–∏–±—ã–ª—å: %.2f —Ä—É–±.\n", stat.TotalProfit))
		textBuilder.WriteString(fmt.Sprintf("   üßæ –ü–ª–∞—Ç–µ–∂–µ–π: %d\n\n", stat.PaymentCount))

		totalProfit += stat.TotalProfit
		totalPayments += stat.PaymentCount
	}

	textBuilder.WriteString(fmt.Sprintf("üìä –ò—Ç–æ–≥–æ: %.2f —Ä—É–±. (%d –ø–ª–∞—Ç–µ–∂–µ–π)", totalProfit, totalPayments))

	keyboard := keyboards.BackKeyboard("analytics")
	msg := tgbotapi.NewMessage(chatID, textBuilder.String())
	msg.ReplyMarkup = keyboard
	b.API.Send(msg)
}

// getLastMonthRange –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ RFC3339
func (b *Bot) getLastMonthRange() (string, string) {
	now := time.Now()
	from := now.AddDate(0, -1, 0) // –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
	to := now

	return from.Format(time.RFC3339), to.Format(time.RFC3339)
}

// Edit versions of list functions

// handleListSubscriptionsEdit –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleListSubscriptionsEdit(chatID int64, messageID int) {
	subscriptions, err := b.Context.APIClient.GetSubscriptions(25, 0)
	if err != nil {
		b.editMessage(chatID, messageID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: %v", err), nil)
		return
	}

	if len(subscriptions) == 0 {
		text := `üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫

üì≠ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É!`

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "create_subscription"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "manage_subscriptions_edit"),
			),
		)

		b.editMessage(chatID, messageID, text, &keyboard)
		return
	}

	var textBuilder strings.Builder
	textBuilder.WriteString("üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n\n")

	for i, sub := range subscriptions {
		status := "‚úÖ"
		if !sub.IsActive {
			status = "‚ùå"
		}

		textBuilder.WriteString(fmt.Sprintf("%d. %s %s\n", i+1, status, sub.ServiceName))
		textBuilder.WriteString(fmt.Sprintf("   üí∞ %.2f %s, –ø–µ—Ä–∏–æ–¥: %d –¥–Ω–µ–π\n",
			sub.BasePrice, sub.BaseCurrency, sub.PeriodDays))
		textBuilder.WriteString(fmt.Sprintf("   üÜî ID: %s\n\n", sub.ID))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "create_subscription"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "edit_subscription"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "list_subscriptions_edit"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "manage_subscriptions_edit"),
		),
	)

	b.editMessage(chatID, messageID, textBuilder.String(), &keyboard)
}

// handleListUsersEdit –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleListUsersEdit(chatID int64, messageID int) {
	users, err := b.Context.APIClient.GetUsers(25, 0)
	if err != nil {
		b.editMessage(chatID, messageID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err), nil)
		return
	}

	if len(users) == 0 {
		text := `üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "create_user"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "manage_users_edit"),
			),
		)

		b.editMessage(chatID, messageID, text, &keyboard)
		return
	}

	var textBuilder strings.Builder
	textBuilder.WriteString("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n")

	for i, user := range users {
		adminStatus := ""
		if user.IsAdmin {
			adminStatus = " üëë"
		}

		usernameText := ""
		if user.Username != "" {
			usernameText = fmt.Sprintf(" (@%s)", user.Username)
		}

		textBuilder.WriteString(fmt.Sprintf("%d. %s%s%s\n", i+1, user.Fullname, usernameText, adminStatus))
		textBuilder.WriteString(fmt.Sprintf("   üÜî TG ID: %d\n", user.TGID))
		textBuilder.WriteString(fmt.Sprintf("   üÜî ID: %s\n\n", user.ID))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "create_user"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "edit_user"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "list_users_edit"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "manage_users_edit"),
		),
	)

	b.editMessage(chatID, messageID, textBuilder.String(), &keyboard)
}
